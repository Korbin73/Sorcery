defmodule ElixirLS.LanguageServer.Builder do
  @moduledoc """
  Server that compiles the current Mix project
  
  This is implemented as a GenServer because builds are not parallelizable. Only one instance of 
  this server should be run to avoid conflicts between builds. (This is mostly an issue during
  tests, not during actual use.)
  """
  use GenServer
  alias ElixirLS.LanguageServer.{BuildError, JsonRpc}
  alias ElixirLS.LanguageServer.Compilers.Elixir, as: EC
  require Logger

  @build_path ".elixir_ls/build"

  ## Client API

  def start_link(name \\ nil) do
    GenServer.start_link(__MODULE__, :ok, name: name)
  end

  def build(server \\ __MODULE__, source_files) do
    GenServer.call(server, {:build, source_files}, :infinity)
  end

  def clean(server \\ __MODULE__, path) do
    GenServer.call(server, {:clean, path}, :infinity)
  end

  ## Server Callbacks

  def handle_call({:build, source_files}, _from, state) do
    response = 
      try do
        build_errors = do_build(source_files)
        {:ok, build_errors}
      rescue
        err -> {:error, err}
      end
    {:reply, response, state}
  end

  def handle_call({:clean, path}, _from, state) do
    File.rm_rf(Path.join([path, @build_path]))
    {:reply, :ok, state}
  end

  # For some unknown reason, this server sometimes receives bizarre casts while performing builds. 
  # This is a noop to avoid crashing when receiving these unwanted casts.
  def handle_cast(_msg, state) do
    {:noreply, state}
  end

  def terminate(reason, state) do
    unless reason == :normal do
      msg = "Elixir Language Server terminated abnormally because "
        <> Exception.format_exit(reason)
      JsonRpc.log_message(:error, msg)
    end
    super(reason, state)
  end

  ## Helpers

  defp do_build(source_files, opts \\ []) do
    compilers = Mix.Tasks.Compile.compilers()
    configs = Mix.Project.config_files ++ Mix.Tasks.Compile.Erlang.manifests
    force = Mix.Project.get() == nil or 
              Mix.Utils.stale?(configs, ElixirLS.LanguageServer.Compilers.Elixir.manifests)

    if force do
      Logger.info("Forcing full rebuild")
      reload_project()
    end

    Mix.shell(Mix.Shell.Quiet)
    Enum.flat_map compilers, fn compiler ->
      case compiler do
        :elixir ->
          compile_elixir(source_files, force)
        :xref ->
          compile_xref()
        _ ->
          Mix.Task.run("compile.#{compiler}", opts)
          []
      end
    end
  end

  defp reload_project do
    current_project = Mix.ProjectStack.pop()

    try do
      Mix.ProjectStack.post_config(build_path: @build_path)
      Code.load_file(System.get_env("MIX_EXS") || "mix.exs")
    rescue
      err -> 
        Logger.error("Error loading project: " <> Exception.format_exit(err))
        case current_project do 
          %{name: name, file: file, config: config} ->
            Mix.ProjectStack.push(name, config, file)
          _ ->
            nil
        end
    end
  end

  defp compile_elixir(changed_sources, force) do
    source_files = Enum.reject(Map.values(changed_sources), &is_nil/1)
    dest = Mix.Project.compile_path(Mix.Project.config)
    manifest = EC.manifest
    srcs = Mix.Project.config[:elixirc_paths]
    opts = [ignore_module_conflict: true]
    {_modules, sources} = EC.compile(manifest, srcs, source_files, dest, force, opts)
    build_errors(sources)
  end

  defp compile_xref do
    errors = 
      ElixirLS.LanguageServer.Compilers.Xref.unreachable fn file, entries ->
        Enum.flat_map entries, fn {lines, error, module, function, arity} ->
          message = 
            case error do
              :unknown_module -> 
                to_string(["function ", Exception.format_mfa(module, function, arity),
                  " is undefined\n(module #{inspect module} is not available)\n"])
              :unknown_function -> 
                to_string(["function ", Exception.format_mfa(module, function, arity),
                  " is undefined or private"])
            end

          for line <- lines do
            %BuildError{severity: :warning, line: line - 1, file: file, message: message, 
              source: "xref"}
          end
        end
      end

    List.flatten(errors)
  end

  # The custom manifest format we use saves the errors and warnings generated by the build in the
  # "source" records.
  defp build_errors(elixir_manifest) do
    require EC
    Enum.flat_map elixir_manifest, fn source ->
      EC.source(error: error, warnings: warnings) = source
      case error do
        nil -> warnings
        _ -> [error | warnings]
      end
    end
  end
end